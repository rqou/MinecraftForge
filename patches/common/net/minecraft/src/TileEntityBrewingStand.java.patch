--- ../src_base/common/net/minecraft/src/TileEntityBrewingStand.java
+++ ../src_work/common/net/minecraft/src/TileEntityBrewingStand.java
@@ -4,7 +4,12 @@
 import cpw.mods.fml.common.asm.SideOnly;
 import java.util.List;
 
-public class TileEntityBrewingStand extends TileEntity implements IInventory
+import net.minecraftforge.common.ISidedInventory;
+import net.minecraftforge.common.ISpecialInventory;
+import net.minecraftforge.common.Orientation;
+import net.minecraftforge.common.StackUtil;
+
+public class TileEntityBrewingStand extends TileEntity implements IInventory, ISidedInventory, ISpecialInventory
 {
     /** The itemstacks currently placed in the slots of the brewing stand */
     private ItemStack[] brewingItemStacks = new ItemStack[4];
@@ -158,7 +163,7 @@
 
             if (Item.itemsList[var1.itemID].hasContainerItem())
             {
-                this.brewingItemStacks[3] = new ItemStack(Item.itemsList[var1.itemID].getContainerItem());
+                this.brewingItemStacks[3] = Item.itemsList[var1.itemID].getContainerItemStack(brewingItemStacks[3]);
             }
             else
             {
@@ -325,4 +330,101 @@
 
         return var1;
     }
+
+    @Override
+    public int getStartInventorySide(Orientation side)
+    {
+        return (side == Orientation.UP ? 3 : 0);
+    }
+
+    @Override
+    public int getSizeInventorySide(Orientation side)
+    {
+        return (side == Orientation.UP ? 1 : 3);
+    }
+
+    @Override
+    public int addItem(ItemStack stack, boolean doAdd, Orientation from)
+    {
+        if(from == Orientation.UP && !stack.getItem().isPotionIngredient())
+            return 0;
+        
+        if(!SlotBrewingStandPotion.func_75243_a_(stack))
+            return 0;
+        
+        StackUtil stackUtil = new StackUtil(stack);
+        boolean added = false;
+        
+        int start = getStartInventorySide(from);
+        int end = start + getSizeInventorySide(from);
+
+        for(int i = start; i < end; i++)
+        {
+            if(stackUtil.tryAdding(this, i, doAdd, false))
+            {
+                added = true;
+                break;
+            }
+        }
+
+        if(added)
+        {
+            if(!doAdd)
+                return stackUtil.itemsAdded;
+            else
+            {
+                while(stack.stackSize - stackUtil.itemsAdded > 0)
+                    stackUtil.tryAdding(this, 3, true, false);
+
+                return stackUtil.itemsAdded;
+            }
+        }
+        
+        if(!added)
+        {
+            for(int i = start; i < end; i++)
+            {
+                if(stackUtil.tryAdding(this, i, doAdd, true))
+                {
+                    added = true;
+                    break;
+                }
+            }
+        }
+
+        if(added)
+        {
+            if(!doAdd)
+                return stackUtil.itemsAdded;
+            else
+            {
+                while(stack.stackSize - stackUtil.itemsAdded > 0)
+                    stackUtil.tryAdding(this, 3, true, true);
+
+                return stackUtil.itemsAdded;
+            }
+        }
+        
+        return 0;
+    }
+
+    @Override
+    public ItemStack[] extractItem(boolean doRemove, Orientation from, int maxItemCount)
+    {
+        int start = getStartInventorySide(from);
+        int end = start + getSizeInventorySide(from);
+        
+        for(int i = start; i < end; i++)
+        {
+            if(brewingItemStacks[i] != null)
+            {
+                if(doRemove)
+                    return new ItemStack[] { decrStackSize(i, 1) };
+                else
+                    return new ItemStack[] { brewingItemStacks[i] };
+            }
+        }
+        
+        return null;
+    }
 }
